#!/usr/bin/env bash

# Switch to the project root directory
DIR="$(cd "$(dirname "$0")" && pwd)"
cd ${DIR}/../

# Create MAGENTO_CLOUD_ROUTES variable
if [ ! -z "${PROJECT}" ] && [ ! -z "${ENVIRONMENT}" ] && [ ! -z "${SITE_URL}" ]; then
    export PROJECT_DOMAIN="${PROJECT}-${ENVIRONMENT}.${SITE_URL}"
fi
if [ -z "${MAGENTO_CLOUD_ROUTES}" ]; then
    [[ -z "${PROJECT_DOMAIN}" ]] && { echo "ERROR: Environment variable PROJECT_DOMAIN must not be empty."; exit 1; }
    export MAGENTO_CLOUD_ROUTES="$(vendor/bin/ece-tools-get-cloud-routes)"
fi

# Ensure mandatory environment variables exist
[[ -z "${MAGENTO_CLOUD_ROUTES}" ]] && { echo "ERROR: Environment variable MAGENTO_CLOUD_ROUTES must not be empty."; exit 1; }
[[ -z "${MAGENTO_CLOUD_VARIABLES}" ]] && { echo "ERROR: Environment variable MAGENTO_CLOUD_VARIABLES must not be empty."; exit 1; }
[[ -z "${MAGENTO_CLOUD_RELATIONSHIPS}" ]] && { echo "ERROR: Environment variable MAGENTO_CLOUD_RELATIONSHIPS must not be empty."; exit 1; }

# Run ece-tools deployment with appropriate scenario
if [ ! -z "${DEVELOPMENT_ENV}" ] || [[ ! $(hostname -s) =~ ^(magento|cronjob) ]]; then
    vendor/bin/ece-tools deploy
elif [[ $(hostname -s) =~ ^magento ]]; then
    vendor/bin/ece-tools run scenario/deploy.xml vendor/phoenix-media/magento2-ece-tools/scenario/deploy/custom-mode-config.xml vendor/phoenix-media/magento2-ece-tools/scenario/deploy/no-upgrade.xml
elif [[ $(hostname -s) =~ ^cronjob ]]; then
    vendor/bin/ece-tools run scenario/deploy.xml vendor/phoenix-media/magento2-ece-tools/scenario/deploy/custom-mode-config.xml
fi

# Exit when the deployment failed
rc=$?;
if [[ $rc != 0 ]]; then
    echo "Deployment failed. Exiting."
    exit
fi

# Enabled varnish as http hosts and workaround to preserve cache settings.
echo "Configuring Varnish host..."
bin/magento setup:config:set --http-cache-hosts=varnish --allow-parallel-generation -n  && bin/magento app:config:import --no-interaction || exit 1

# Must we install the sample data ?
if [[ ! -f var/.magento-installed ]] && [[ ! -z "${ADD_SAMPLE_DATA}" ]] && [[ "${ADD_SAMPLE_DATA}" == "true" ]]; then
    export COMPOSER_NO_INTERACTION=1 COMPOSER_CACHE_DIR="/tmp/composer"

    echo "Installing sample data..."
    bin/magento sampledata:deploy
    bin/magento setup:upgrade || exit 1
fi

touch var/.magento-installed || true

if [ ! -z "${DEVELOPMENT_ENV}" ]; then
    echo "Enabling developer mode..."

    export COMPOSER_NO_INTERACTION=1 COMPOSER_CACHE_DIR="/tmp/composer"
    composer install --ignore-platform-reqs

    bin/magento deploy:mode:set developer || exit 1
fi

# Enforce cache enablement"
bin/magento cache:enable || exit 1

### We are ready now @see ReadinessProbe of Magento.yaml
touch /tmp/deployed
